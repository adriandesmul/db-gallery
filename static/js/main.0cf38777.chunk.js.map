{"version":3,"sources":["components/Topic.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Topic","listAttr","setSelectedImg","useState","images","setImages","order","setOrder","useEffect","Axios","get","then","data","map","i","idx","rating","parseFloat","console","log","cards","sort","a","b","style","position","display","top","left","zIndex","Group","value","onChange","target","Button","pagination","pageSize","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","Item","hoverable","flex","margin","key","cover","alt","src","thumbnail","crossOrigin","onClick","Meta","title","description","StarFilled","url","Image","href","setTitle","imgUrl","setImgUrl","story","setStory","comments","setComments","setResolutions","preview","resolutions","html","content","__html","width","bordered","borderColor","author","dangerouslySetInnerHTML","user","datetime","date","text","Header","Layout","Content","SubMenu","Menu","App","categories","setCategories","newest","setNewest","themes","setThemes","free","setFree","years","setYears","topic","setTopic","selectedImg","split","menuItem","name","filter","slice","findIndex","thumb","className","theme","mode","cursor","flexWrap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0cf38777.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { List, Card, Radio } from \"antd\";\nimport { StarFilled } from \"@ant-design/icons\";\n\nimport Axios from \"axios\";\nconst url = \"https://digitalblasphemy.com\";\n\nexport default function Topic({ listAttr, setSelectedImg }) {\n  const [images, setImages] = useState([]);\n  const [order, setOrder] = useState(\"release\");\n\n  useEffect(() => {\n    Axios.get(\n      \"https://digitalblasphemy.com/cgi-bin/seeall_json.cgi?\" + listAttr\n    ).then(({ data }) => {\n      setImages(\n        data.map((i, idx) => {\n          return { ...i, idx, rating: parseFloat(i.rating) };\n        })\n      );\n      console.log(data);\n    });\n  }, [listAttr]);\n\n  const cards = images.sort((a, b) => {\n    // console.log(order, a, b);\n    if (order === \"release\") return a.idx - b.idx;\n    return b.rating - a.rating;\n  });\n\n  const renderCard = (i) => (\n    <List.Item>\n      <Card\n        hoverable\n        style={{ flex: \"1 0 400px\", margin: \"10px\" }}\n        key={i.idx}\n        cover={\n          <img alt=\"thumb\" src={url + i.thumbnail} crossOrigin=\"anonymous\" />\n        }\n        onClick={() => {\n          console.log(i);\n          setSelectedImg(i);\n        }}\n      >\n        <Card.Meta\n          title={i.title}\n          description={\n            <>\n              {i.rating} <StarFilled />\n            </>\n          }\n        ></Card.Meta>\n      </Card>\n    </List.Item>\n  );\n\n  return (\n    <>\n      <div style={{ position: \"relative\" }}>\n        <div\n          style={{\n            display: \"block\",\n            position: \"absolute\",\n            top: 24,\n            left: 10,\n            zIndex: 10,\n          }}\n        >\n          Sort by:{\" \"}\n          <Radio.Group value={order} onChange={(i) => setOrder(i.target.value)}>\n            <Radio.Button value=\"release\">Release Date</Radio.Button>\n            <Radio.Button value=\"rating\">Rating</Radio.Button>\n          </Radio.Group>\n        </div>\n        <List\n          pagination={{ pageSize: 12, position: \"top\" }}\n          grid={{\n            gutter: 16,\n            xs: 1,\n            sm: 2,\n            md: 3,\n            lg: 3,\n            xl: 4,\n            xxl: 4,\n          }}\n          dataSource={cards}\n          renderItem={renderCard}\n        ></List>\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Comment, List } from \"antd\";\n\nimport Axios from \"axios\";\nconst url = \"https://digitalblasphemy.com\";\n\nexport default function Image({ href }) {\n  const [title, setTitle] = useState();\n  const [imgUrl, setImgUrl] = useState();\n  const [story, setStory] = useState();\n  const [comments, setComments] = useState([]);\n  const [resolutions, setResolutions] = useState([]);\n\n  useEffect(() => {\n    Axios.get(url + href).then(({ data }) => {\n      console.log(data);\n      setTitle(data.title);\n      setImgUrl(data.preview);\n      setStory(data.story[0]);\n      setComments(data.comments);\n      setResolutions(data.resolutions);\n    });\n  }, [href]);\n\n  const html = (content) => {\n    return { __html: content };\n  };\n\n  return (\n    <div style={{ width: \"100%\", margin: 10 }}>\n      <div style={{ display: \"flex\", width: \"100%\", margin: 10 }}>\n        <div>\n          <img\n            src={url + imgUrl}\n            alt={title + \" preview\"}\n            style={{ margin: 10 }}\n          />\n        </div>\n        <div>\n          <h1>{title}</h1>\n          <p>{story}</p>\n        </div>\n      </div>\n      <List\n        bordered\n        dataSource={comments}\n        renderItem={(i) => (\n          <List.Item style={{ borderColor: \"#d9d9d9\" }}>\n            <Comment\n              author={<div dangerouslySetInnerHTML={html(i.user)} />}\n              datetime={i.date}\n              content={\n                <>\n                  <strong>{i.title}</strong>\n                  <br />\n                  <div dangerouslySetInnerHTML={html(i.text)} />\n                </>\n              }\n            />\n          </List.Item>\n        )}\n      ></List>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Breadcrumb, Layout, Menu, Card } from \"antd\";\nimport Axios from \"axios\";\nimport Topic from \"./components/Topic\";\nimport Image from \"./components/Image\";\nimport \"./app.css\";\n\nconst { Header, Content } = Layout;\nconst { SubMenu } = Menu;\nconst url = \"https://digitalblasphemy.com\";\n\nfunction App() {\n  const [categories, setCategories] = useState([]);\n  const [newest, setNewest] = useState([]);\n  const [themes, setThemes] = useState([]);\n  const [free, setFree] = useState([]);\n  const [years, setYears] = useState([]);\n\n  const [topic, setTopic] = useState();\n  //   {\n  //   name: \"Abstract\",\n  //   href: \"y=todos&t=1&w=&h=&r=1&f=\",\n  // }\n  const [selectedImg, setSelectedImg] = useState();\n  //   {\n  //   bigthumbnail: \"/graphics/640x480/flourish1640.jpg\",\n  //   free: 0,\n  //   gallery: \"Abstracts\",\n  //   href: \"/cgi-bin/preview_json.cgi?i=flourish1\",\n  //   id: \"flourish1\",\n  //   idx: 0,\n  //   rating: 8.85,\n  //   thumbnail: \"/graphics/thumbs/flourish1_xthumb.jpg\",\n  //   title: \"The Flourish\",\n  //   year: \"todos\",\n  // }\n\n  useEffect(() => {\n    Axios.get(\"https://digitalblasphemy.com/galleries.json\").then(\n      ({ data }) => {\n        data = data.map((i) => {\n          return { ...i, href: i.href.split(\"?\")[1] };\n        });\n        const menuItem = (i) => (\n          <Menu.Item\n            key={i.name}\n            onClick={() => {\n              setTopic({ name: i.name, href: i.href });\n              setSelectedImg();\n            }}\n          >\n            {i.name}\n          </Menu.Item>\n        );\n\n        setCategories(data);\n        setNewest(data.filter((i) => i.name === \"Newest\").map(menuItem));\n        setThemes(\n          data\n            .slice(\n              1,\n              data.findIndex((i) => i.name === \"FREE Samples\")\n            )\n            .map(menuItem)\n        );\n        setFree(data.filter((i) => i.name === \"FREE Samples\").map(menuItem));\n        setYears(\n          data\n            .slice(data.findIndex((i) => i.name === \"FREE Samples\") + 1)\n            .map(menuItem)\n        );\n      }\n    );\n  }, []);\n\n  const cards = categories.map((i) => (\n    <Card\n      hoverable\n      key={i.name}\n      style={{ flex: \"1 0 500px\", margin: \"10px\" }}\n      cover={\n        <img\n          crossOrigin=\"anonymous\"\n          alt={i.name + \" thumb\"}\n          src={url + i.thumb}\n        />\n      }\n      onClick={() => setTopic({ name: i.name, href: i.href })}\n      title={i.name}\n    ></Card>\n  ));\n\n  return (\n    <Layout className=\"layout\">\n      <Header>\n        <div\n          className=\"name\"\n          onClick={() => {\n            setTopic();\n            setSelectedImg();\n          }}\n        >\n          DB Gallery\n        </div>\n        <Menu theme=\"dark\" mode=\"horizontal\">\n          {newest}\n          <SubMenu title=\"Categories\">{themes}</SubMenu>\n          {free}\n          <SubMenu title=\"Years\">{years}</SubMenu>\n        </Menu>\n      </Header>\n      <Breadcrumb style={{ margin: \"24px 0px 0px 10px\" }}>\n        <Breadcrumb.Item\n          onClick={() => {\n            setTopic();\n            setSelectedImg();\n          }}\n          style={{ cursor: \"pointer\" }}\n        >\n          Home\n        </Breadcrumb.Item>\n        {topic && (\n          <Breadcrumb.Item onClick={() => setSelectedImg()}>\n            {topic.name}\n          </Breadcrumb.Item>\n        )}\n        {selectedImg && <Breadcrumb.Item>{selectedImg.title}</Breadcrumb.Item>}\n      </Breadcrumb>\n      <Content style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n        {!topic && !selectedImg && cards}\n        {topic && !selectedImg && (\n          <Topic listAttr={topic.href} setSelectedImg={setSelectedImg}></Topic>\n        )}\n        {topic && selectedImg && <Image href={selectedImg.href} />}\n      </Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}